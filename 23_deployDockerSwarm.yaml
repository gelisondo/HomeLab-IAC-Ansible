- name: Configurar Docker en los hosts remotos
  hosts: dockerSwarm
  user: root
  gather_facts: true
  vars:
    primary_package:
      - gnupg2
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
    package_docker:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
  tasks:
    - name: Instalamos paquetes Primarios
      ansible.builtin.apt:
        pkg: "{{ item }}"
        state: present
      loop: "{{ primary_package }}"

    - name: Descargar clave GPG para Docker
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/debian/gpg
        dest: /etc/apt/keyrings/docker.gpg

    - name: Convertimos la clave GPG al formato dearmor
      ansible.builtin.command:
        cmd: gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg /etc/apt/keyrings/docker.gpg
        creates: /etc/apt/trusted.gpg.d/docker.gpg

    - name: Agregar repositorio de Docker
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present

    - name: Instalar paquetes necesarios para Docker
      ansible.builtin.apt:
        pkg: "{{ package_docker }}"
        state: present
      when:
        - ansible_facts['distribution'] == "Debian"
        - ansible_facts['distribution_release'] in ["bullseye", "bookworm"]

- name: Inicializar o administrar el clúster Docker Swarm
  hosts: dockerManagers
  user: root
  gather_facts: true
  tasks:
    - name: Verificar si el clúster ya está inicializado
      shell: docker info --format '{{json .Swarm.LocalNodeState}}'
      register: swarm_state
      changed_when: false
      when: inventory_hostname == groups['dockerManagers'][0]

    - name: Inicializar el clúster si no existe
      community.docker.docker_swarm:
        state: present
        advertise_addr: "{{ advertise_network }}"
        listen_addr: "{{ listen_network }}"
      when: swarm_state.stdout == '"inactive"'
      register: swarm_init
      when: inventory_hostname == groups['dockerManagers'][0]

- name: Guardar tokens en el vault desde el nodo principal
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Guardar tokens en el vault (Managers)
      blockinfile:
        path: "group_vars/dockerManagers/vaults/main.yml"
        create: yes
        block: |
          vault_tokenManagers: "{{ swarm_init.join_tokens.manager }}"
      when: swarm_state.stdout == '"inactive"'

    - name: Guardar tokens en el vault (Workers)
      blockinfile:
        path: "group_vars/dockerWorkers/vaults/main.yml"
        create: yes
        block: |
          vault_tokenWorkers: "{{ swarm_init.join_tokens.worker }}"
      when: swarm_state.stdout == '"inactive"'

    - name: Cargar tokens desde el vault si existen (Managers)
      include_vars:
        file: "group_vars/dockerManagers/vaults/main.yml"
        name: vault
      ignore_errors: yes

    - name: Asignar tokenManager desde el vault
      set_fact:
        tokenManagers: "{{ vault_tokenManagers | default('') }}"

    - name: Cargar tokens desde el vault si existen (Workers)
      include_vars:
        file: "group_vars/dockerWorkers/vaults/main.yml"
        name: vault
      ignore_errors: yes

    - name: Asignar tokenWorker desde el vault
      set_fact:
        tokenWorkers: "{{ vault_tokenWorkers | default('') }}"

- name: Agregar nuevos managers al clúster
  hosts: dockerManagers
  user: root
  tasks:
    - name: Unir al clúster como manager
      community.docker.docker_swarm:
        state: join
        join_token: "{{ tokenManagers }}"
        remote_addrs:
          - "{{ hostvars[groups['dockerManagers'][0]]['ansible_host'] }}"
        advertise_addr: "{{ advertise_network }}"
        listen_addr: "{{ listen_network }}"
      when: inventory_hostname != groups['dockerManagers'][0]

- name: Agregar nuevos workers al clúster
  hosts: dockerWorkers
  user: root
  tasks:
    - name: Unir al clúster como worker
      community.docker.docker_swarm:
        state: join
        join_token: "{{ tokenWorkers }}"
        remote_addrs:
          - "{{ hostvars[groups['dockerManagers'][0]]['ansible_host'] }}"
        advertise_addr: "{{ advertise_network }}"
        listen_addr: "{{ listen_network }}"
