- name: Deploys VM based on cloud image
  hosts: localhost
  user: fullpower
  gather_facts: yes
  become: yes
  vars:
    base_image_name: debian-12-generic-amd64-20240717-1811.qcow2
    base_image_url: https://cloud.debian.org/images/cloud/bookworm/20240717-1811/{{ base_image_name }}
    base_image_sha: 9ce1ce8c0f16958dd07bce6dd44d12f4d44d12593432a3a8f7c890c262ce78b0402642fa25c22941760b5a84d631cf81e2cb9dc39815be25bf3a2b56388504c6
    libvirt_pool_dir: "/var/lib/libvirt/images"
    vm_names:
      - DockerWorker1
      - DockerWorker2
      - DockerWorker3
      - DockerWorker4
    vm_vcpus: 2
    vm_ram_mb: 2048
    #vm_net: default
    vm_net: bridged-network #Modifico esta varible para que utilice un Bridge para comunicarnos directamente con la VM
    vm_root_pass: test123
    cleanup_tmp: no
    ssh_key: "{{ inventory_dir }}/files/PublicKeys/id_rsa-tsubasaadmin.pub"

  tasks:
    - name: Requieriments of fedora 
      package:
        name:
          - guestfs-tools
          - python3-libvirt
        state: present
      become: yes
      when: ansible_facts['distribution'] == "Fedora"

    - name: Requieriments of RedHat, CentOS, Debian or Ubuntu
      package:
        name:
          - libguestfs-tools
          - python3-libvirt 
          - python3-lxml
        state: present
      become: yes
      when: ( ansible_facts['distribution'] == "CentOS" ) or
            ( ansible_facts['distribution'] == "RedHat" ) or
            ( ansible_facts['distribution'] == "Debian")  or
            ( ansible_facts['distribution'] == "Ubuntu")

    #Listamos todas las VMs y registramos la salida
    - name: Gets vms list
      community.libvirt.virt:
        command: list_vms
      register: existing_vms
      changed_when: no 
      #https://docs.ansible.com/ansible/latest/collections/community/libvirt/virt_module.html
      

    #Cada vez que vamos a realizar un despligue descargaremos una imagen cloud init.
    #Nota: Podemos descargarlos en otro lugar si necesitamos mantener las imagenes  
    - name: Ansible check file exists.
      stat:
        path: "{{ libvirt_pool_dir }}/{{ base_image_name }}"
      register: test_imagen

    - name: Download base image
      get_url:
        url: "{{ base_image_url }}"
        dest: "{{ libvirt_pool_dir }}/{{ base_image_name }}"
        checksum: "sha512:{{ base_image_sha }}"
      when: test_imagen.stat.exists == False
      


    # - name: Copy base image to libvirt directory
    #   copy:
    #     dest: "{{ libvirt_pool_dir }}/{{ item }}.qcow2"
    #     src: "{{ inventory_dir }}/files/{{ base_image_name }}"
    #     force: no
    #     remote_src: yes 
    #     mode: 0660
    #   register: copy_results
    #   with_items: "{{ vm_names }}"

    #execute the command virt-customize to customize the cloud image
    - name: Configure the image
      command: |
        virt-customize -a {{ libvirt_pool_dir }}/{{ item }}.qcow2 \
        --hostname {{ item }} \
        --root-password password:{{ vm_root_pass }} \
        --ssh-inject 'root:file:{{ ssh_key }}' \
        --uninstall cloud-init --selinux-relabel
      when: ( copy_results is changed )  and ( ansible_facts['distribution'] == "RedHat" or ansible_facts['distribution'] == "RedHat" )
      with_items: "{{ vm_names }}"


    #execute the command virt-customize to customize the cloud image
    - name: Configure the image
      command: |
        virt-customize -a {{ libvirt_pool_dir }}/{{ item }}.qcow2 \
        --hostname {{ item }} \
        --root-password password:{{ vm_root_pass }} \
        --ssh-inject 'root:file:{{ ssh_key }}' \
        --uninstall cloud-init 
      when: ( copy_results is changed ) and ( ansible_facts['distribution'] != "RedHat" or ansible_facts['distribution'] != "CentOS" )
      with_items: "{{ vm_names }}"

    - name: Define vm
      community.libvirt.virt:
        command: define
        xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
      when: "{{ item }} not in existing_vms.list_vms"
      with_items: "{{ vm_names }}"

    - name: Ensure VM is started
      community.libvirt.virt:
        name: "{{ item }}"
        state: running
      register: vm_start_results
      until: "vm_start_results is success"
      retries: 15
      delay: 2
      with_items: "{{ vm_names }}"

    # - name: Ensure temporary file is deleted
    #   file:
    #     path: "{{ inventory_dir }}/files/{{ base_image_name }}"
    #     state: absent
    #   when: cleanup_tmp | bool
